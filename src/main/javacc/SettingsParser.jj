options{  JDK_VERSION = "1.8";  STATIC = false;  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;}PARSER_BEGIN(SettingsParser)package jbse.apps.settings;

import java.util.ArrayList;

class SettingsParser {
  ArrayList<String> notInitializedClasses;
  ArrayList<String[]> expandToLICS;
  ArrayList<String[]> resolveAliasOriginLICS;
  ArrayList<String[]> resolveAliasInstanceofLICS;  ArrayList<String[]> resolveAliasNeverLICS;
  ArrayList<String[]> resolveNotNullLICS;  ArrayList<String[]> expandToTrigger;  ArrayList<String[]> expansionBackdoor;  ArrayList<String[]> resolveAliasOriginTrigger;  ArrayList<String[]> resolveAliasInstanceofTrigger;  ArrayList<String[]> resolveNullTrigger;  public void reset() {    this.notInitializedClasses = new ArrayList<String>();    this.expandToLICS = new ArrayList<String[]>();    this.resolveAliasOriginLICS = new ArrayList<String[]>();    this.resolveAliasInstanceofLICS = new ArrayList<String[]>();    this.resolveAliasNeverLICS = new ArrayList<String[]>();    this.resolveNotNullLICS = new ArrayList<String[]>();    this.expandToTrigger = new ArrayList<String[]>();    this.expansionBackdoor = new ArrayList<String[]>();    this.resolveAliasOriginTrigger = new ArrayList<String[]>();    this.resolveAliasInstanceofTrigger = new ArrayList<String[]>();    this.resolveNullTrigger = new ArrayList<String[]>();  }}PARSER_END(SettingsParser)SKIP :{ "--" : COMMENT}< COMMENT > SKIP:{  "\n" : DEFAULT| "\r" : DEFAULT}< COMMENT > MORE :{  < ~[] >}TOKEN :{  < WS : [" ","\r","\t","\n"] >| < INIT_BEGIN : "i" "n" "i" "t" " " "b" "e" "g" "i" "n" >| < RESOLVE_BEGIN : "r" "e" "s" "o" "l" "v" "e" " " "b" "e" "g" "i" "n" >| < TRIGGER_BEGIN : "t" "r" "i" "g" "g" "e" "r" " " "b" "e" "g" "i" "n" >| < INIT_END : "i" "n" "i" "t" " " "e" "n" "d" >| < RESOLVE_END : "r" "e" "s" "o" "l" "v" "e" " " "e" "n" "d" >| < TRIGGER_END : "t" "r" "i" "g" "g" "e" "r" " " "e" "n" "d">| < NOT_NULL : "n" "o" "t" " " "n" "u" "l" "l" >| < NULL : "n" "u" "l" "l" >| < INSTANCEOF : "i" "n" "s" "t" "a" "n" "c" "e" "o" "f">| < EXPANDSTO : "e" "x" "p" "a" "n" "d" "s" " " "t" "o">| < NOTHING : "n" "o" "t" "h" "i" "n" "g" >| < ALIASES : "a" "l" "i" "a" "s" "e" "s">| < TARGET : "t" "a" "r" "g" "e" "t">| < NEVER : "n" "e" "v" "e" "r">| < TRIGGERS : "t" "r" "i" "g" "g" "e" "r" "s">| < MAX : "{" "M" "A" "X" "}">
| < ROOT : "{" "R" "O" "O" "T" "}" >| < ANY : "{" "R" "_" "A" "N" "Y" "}" >| < REF : "{" "$" "R" "E" "F" "}" >| < REFANY : "{" "$" "R" "_" "A" "N" "Y" "}" >| < UP : "{" "U" "P" "}" >| < REGEX_ALLCHARS : "{" "\u00b0" "}">| < REGEX_EOL : "{" "E" "O" "L" "}">| < SLASH : "/" >| < DOLLAR : "$" >| < COLON : ":" >| < LETTER_TYPE : ["B","C","D","F","I","J","S","Z"] >| < V : "V" >| < L : "L" >| < SEMICOLON : ";" >| < DOT : "." >| < LPAREN : "(" >| < RPAREN : ")" >| < LSQUARE : "[" >| < RSQUARE : "]" >| < LANGLE : "<" >| < RANGLE : ">" >| < AT : "@" >| < UNDERSCORE : "_" >| < COMMA : "," >| < LETTER : ["a"-"z","A","E","G","H","K","M","N","O","P","Q","R","S","T","U","W","X","Y"] >| < DIGIT : ["0"-"9"] >| < REGEX_SYMBOL : ["*","+","|","\\","?","!","^"] >}void start() :{  this.reset();
}{
  ( secInit() )?
  ( secResolve() )?  ( secTrigger() )?  < EOF >
}

void secInit() :
{}
{  < INIT_BEGIN > (< WS >)+ rowInit() < SEMICOLON > (< WS >)+ (rowInit() < SEMICOLON > (< WS >)+)*  < INIT_END > (< WS >)*}

void rowInit() :
{
  String name;
}
{  name=cname()
  {
    notInitializedClasses.add(name);  }
}

void secResolve() :
{}
{
  < RESOLVE_BEGIN > (< WS >)+ rowResolve() < SEMICOLON > (< WS >)+ (rowResolve() < SEMICOLON > (< WS >)+)* < RESOLVE_END > (< WS >)*
}
void rowResolve() :{
  String toResolve = null, toResolveClassName = null, resolved = null, resolvedClassName = null, triggerClassName = null, triggerArgsType = null, triggerMethodName = null, triggerMethodParams = null;
}{
  ( toResolve=pathAbsolute() (< WS >)+)? < INSTANCEOF > (< WS >)+ toResolveClassName=cname() (< WS >)+
  (
    < NOT_NULL >
    {      resolveNotNullLICS.add(new String[] { toResolveClassName, toResolve });
    }  | < NULL > ( (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )? )?    {      if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {        resolveNullTrigger.add(new String[] { toResolveClassName, toResolve, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });      }    }  | ( < EXPANDSTO > (< WS >)+
      (
        < NOTHING >
        {
          expandToLICS.add(new String[] { toResolveClassName, toResolve, null });        }
      | < INSTANCEOF > (< WS >)+ resolvedClassName=cname() ( (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )? )?        {          expandToLICS.add(new String[] { toResolveClassName, toResolve, resolvedClassName });          if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {            expandToTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });          }          expansionBackdoor.add(new String[] { toResolveClassName, resolvedClassName });        }      )    )  | ( < ALIASES > (< WS >)+      (        < NOTHING >        {          resolveAliasInstanceofLICS.add(new String[] { toResolveClassName, toResolve, null });        }      | < INSTANCEOF > (< WS >)+ resolvedClassName=cname() ( (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )? )?          {            resolveAliasInstanceofLICS.add(new String[] { toResolveClassName, toResolve, resolvedClassName });            if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {              resolveAliasInstanceofTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });            }          }      | < TARGET > (< WS >)+ resolved=pathTarget() ( (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )? )?        {          resolveAliasOriginLICS.add(new String[] { toResolveClassName, toResolve, resolved });          if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {            resolveAliasOriginTrigger.add(new String[] { toResolveClassName, toResolve, resolved, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });          }        }      )
    )  | ( < NEVER > (< WS >)+ < ALIASES > (< WS >)+ < TARGET > (< WS >)+ resolved=pathTarget() )    {      resolveAliasNeverLICS.add(new String[] { toResolveClassName, toResolve, resolved });
    }
  )
}

void secTrigger() :{}{  < TRIGGER_BEGIN > (< WS >)+ rowTrigger() < SEMICOLON > (< WS >)+ (rowTrigger() < SEMICOLON > (< WS >)+)*  < TRIGGER_END > (< WS >)*}void rowTrigger() :{  String toResolve = null, toResolveClassName = null, resolved = null, resolvedClassName = null, triggerClassName = null, triggerArgsType = null, triggerMethodName = null, triggerMethodParams = null;}{  ( toResolve=pathAbsolute() (< WS >)+)? < INSTANCEOF > (< WS >)+ toResolveClassName=cname() (< WS >)+  (    < NULL > (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )?     {      resolveNullTrigger.add(new String[] { toResolveClassName, toResolve, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });    }  | < EXPANDSTO > (< WS >)+ < INSTANCEOF > (< WS >)+ resolvedClassName=cname() (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )?    {      expandToTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });      expansionBackdoor.add(new String[] { toResolveClassName, resolvedClassName });    }  | ( < ALIASES > (< WS >)+      (        < INSTANCEOF > (< WS >)+ resolvedClassName=cname() (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )?          {            resolveAliasInstanceofTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });          }      | < TARGET > (< WS >)+ resolved=pathTarget() (< WS >)+ < TRIGGERS > (< WS >)+ triggerClassName=cname() < COLON > triggerArgsType=descriptor() < COLON > triggerMethodName=id() ( < COLON > triggerMethodParams=pathRelative() )?        {          resolveAliasOriginTrigger.add(new String[] { toResolveClassName, toResolve, resolved, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });        }      )    )  )}String cname() :
{
  StringBuilder buf = new StringBuilder();  Token i = null;
  String s = null;
}
{  (
    s=id()
    {
      buf.append(s);    }
    (
      i=< SLASH > s=id()
      {
        buf.append(i.toString());
        buf.append(s);
      }
    )*
    (      i=< DOLLAR > s=id()      {        buf.append(i.toString());        buf.append(s);      }    )*  | i=< LSQUARE > s=tname()    {      buf.append(i.toString());      buf.append(s);    }  )  {    return buf.toString();
  }}String descriptor() :{  StringBuilder buf = new StringBuilder();  Token i = null;  String typeName = null;}{  i=< LPAREN >  {    buf.append(i.toString());  }  (    typeName=tname()    {      buf.append(typeName);    }  )*  i=< RPAREN >  {    buf.append(i.toString());  }  (    typeName=tname()    {      buf.append(typeName);    }  | i=< V >  	{  	  buf.append(i.toString());  	}  )  {   return buf.toString();  }}String tname() :{  StringBuilder buf = new StringBuilder();  Token i1 = null, i2 = null;  String s = null;}{  (    i1=< LETTER_TYPE > {      buf.append(i1.toString());    }  | i1=< L > s=cname() i2=< SEMICOLON > {      buf.append(i1.toString());      buf.append(s);      buf.append(i2.toString());    }  | i1=< LSQUARE > s=tname() {      buf.append(i1.toString());      buf.append(s);    }  )  {    return buf.toString();  }}String id() :{  StringBuilder buf = new StringBuilder();  Token i = null;}{  (    i=< NULL >    {      buf.append(i.toString());    }  | i=< INSTANCEOF >    {      buf.append(i.toString());    }  | i=< NOTHING >    {      buf.append(i.toString());    }  | i=< ALIASES >    {      buf.append(i.toString());    }  | i=< TARGET >    {      buf.append(i.toString());    }  | i=< NEVER >    {      buf.append(i.toString());    }  | i=< TRIGGERS >    {      buf.append(i.toString());    }  | i=< LETTER >    {      buf.append(i.toString());    }  | i=< LETTER_TYPE >    {      buf.append(i.toString());    }  | i=< L >    {      buf.append(i.toString());    }  | i=< V >    {      buf.append(i.toString());    }  | i=< DIGIT >    {      buf.append(i.toString());    }  | i=< UNDERSCORE >    {      buf.append(i.toString());    }  )+  {    return buf.toString();  }}String pathTarget() :{  StringBuilder buf = new StringBuilder();  Token i = null;  String s = null;}{  (    i=< MAX >    {      buf.append(i.toString());    }  )?  (    s=pathAbsolute()    {      buf.append(s);    }  | s=pathRelative()    {      buf.append(s);    }  )  {    return buf.toString();  }}String pathAbsolute() :{  StringBuilder buf = new StringBuilder();  Token i1 = null, i2 = null, i3 = null, i4 = null, i5 = null, i6 = null;  String s1 = null, s2 = null, s3 = null, s4 = null, s5 = null;}{  (    i1=< ROOT > i2=< COLON > s1=regexAbsolute()    {      buf.append(i1.toString());      buf.append(i2.toString());      buf.append(s1);    }  | i1=< LSQUARE > s1=cname() i2=< RSQUARE > i3=< DOT > s2=regexAbsolute()    {      buf.append(i1.toString());      buf.append(s1);      buf.append(i2.toString());      buf.append(i3.toString());      buf.append(s2);    }							  | i1=< LANGLE > s1=regexFname() i2=< AT > s2=pathAbsoluteList() (i3=< AT > s3=regexHistoryPoint())? i4=< RANGLE >							    {      buf.append(i1.toString());      buf.append(s1);      buf.append(i2.toString());      buf.append(s2);      if (s3 != null) {         buf.append(i3.toString());        buf.append(s3);      }      buf.append(i4.toString());    }  | i1=< ANY > (s1=regexAbsolute())?    {      buf.append(i1.toString());      if (s1 != null) {        buf.append(s1);      }    }  )  {    return buf.toString();  }}String pathAbsoluteList() :{  StringBuilder buf = new StringBuilder();  String s = null;}{  (    s=pathAbsolute()    {      buf.append(s);    }	    (      < COMMA > s=pathAbsolute()      {        buf.append(s);      }    )*  )?  {    return buf.toString();  }}String pathRelative() :{  StringBuilder buf = new StringBuilder();  Token i1 = null, i2 = null;  String s = null;}{  (    i1=< REF > (i2=< DOT > s=regexRelative())?    {  	  buf.append(i1.toString());      if (s != null) {  	    buf.append(i2.toString());        buf.append(s);      }    }  | i1=< REFANY > (i2=< DOT > s=regexRelative())?    {  	  buf.append(i1.toString());      if (s != null) {  	    buf.append(i2.toString());        buf.append(s);      }    }  )  {    return buf.toString();  }}String regexAbsolute() :{    StringBuilder buf = new StringBuilder();   Token i1 = null, i2 = null;   String s = null;}{  (    i1=< NULL >    {      buf.append(i1.toString());    }  | i1=< INSTANCEOF >    {      buf.append(i1.toString());    }  | i1=< NOTHING >    {      buf.append(i1.toString());    }  | i1=< ALIASES >    {      buf.append(i1.toString());    }  | i1=< TARGET >    {      buf.append(i1.toString());    }  | i1=< NEVER >    {      buf.append(i1.toString());    }  | i1=< TRIGGERS >    {      buf.append(i1.toString());    }  | i1=< LETTER >    {      buf.append(i1.toString());    }  | i1=< LETTER_TYPE >    {      buf.append(i1.toString());    }  | i1=< L >    {      buf.append(i1.toString());    }  | i1=< V >    {      buf.append(i1.toString());    }  | i1=< DIGIT >    {      buf.append(i1.toString());    }  | i1=< UNDERSCORE >    {      buf.append(i1.toString());    }  | i1=< SLASH >    {      buf.append(i1.toString());    }  | i1=< DOLLAR >    {      buf.append(i1.toString());    }  | i1=< DOT >    {      buf.append(i1.toString());    }  | i1=< COLON >    {      buf.append(i1.toString());    }  | i1=< LSQUARE >    {      buf.append(i1.toString());    }  | i1=< RSQUARE >    {      buf.append(i1.toString());    }  | i1=< REGEX_SYMBOL >    {      buf.append(i1.toString());    }  | i1=< REGEX_ALLCHARS >    {      buf.append(i1.toString());    }  | i1=< REGEX_EOL >    {      buf.append(i1.toString());    }  | i1=< LPAREN > s=regexAbsolute() i2=< RPAREN >    {      buf.append(i1.toString());      buf.append(s);      buf.append(i2.toString());    }  )+  {    return buf.toString();  }}String regexRelative() :{    StringBuilder buf = new StringBuilder();   Token i1 = null, i2 = null;   String s = null;}{  (    i1=< NULL >    {      buf.append(i1.toString());    }  | i1=< INSTANCEOF >    {      buf.append(i1.toString());    }  | i1=< NOTHING >    {      buf.append(i1.toString());    }  | i1=< ALIASES >    {      buf.append(i1.toString());    }  | i1=< TARGET >    {      buf.append(i1.toString());    }  | i1=< NEVER >    {      buf.append(i1.toString());    }  | i1=< TRIGGERS >    {      buf.append(i1.toString());    }  | i1=< LETTER >    {      buf.append(i1.toString());    }  | i1=< LETTER_TYPE >    {      buf.append(i1.toString());    }  | i1=< L >    {      buf.append(i1.toString());    }  | i1=< V >    {      buf.append(i1.toString());    }  | i1=< DIGIT >    {      buf.append(i1.toString());    }  | i1=< UNDERSCORE >    {      buf.append(i1.toString());    }  | i1=< SLASH >    {      buf.append(i1.toString());    }  | i1=< DOLLAR >    {      buf.append(i1.toString());    }  | i1=< DOT >    {      buf.append(i1.toString());    }  | i1=< COLON >    {      buf.append(i1.toString());    }  | i1=< REGEX_SYMBOL >    {      buf.append(i1.toString());    }  | i1=< LSQUARE >    {      buf.append(i1.toString());    }  | i1=< RSQUARE >    {      buf.append(i1.toString());    }  | i1=< REGEX_ALLCHARS >    {      buf.append(i1.toString());    }  | i1=< REGEX_EOL >    {      buf.append(i1.toString());    }  | i1=< UP >    {      buf.append(i1.toString());    }   | i1=< LPAREN > s=regexRelative() i2=< RPAREN >    {      buf.append(i1.toString());      buf.append(s);      buf.append(i2.toString());    }  )+  {    return buf.toString();  }}String regexFname() :{    StringBuilder buf = new StringBuilder();   Token i1 = null, i2 = null;   String s = null;}{  (    i1=< NULL >    {      buf.append(i1.toString());    }  | i1=< INSTANCEOF >    {      buf.append(i1.toString());    }  | i1=< NOTHING >    {      buf.append(i1.toString());    }  | i1=< ALIASES >    {      buf.append(i1.toString());    }  | i1=< TARGET >    {      buf.append(i1.toString());    }  | i1=< NEVER >    {      buf.append(i1.toString());    }  | i1=< TRIGGERS >    {      buf.append(i1.toString());    }  | i1=< LETTER >    {      buf.append(i1.toString());    }  | i1=< LETTER_TYPE >    {      buf.append(i1.toString());    }  | i1=< L >    {      buf.append(i1.toString());    }  | i1=< V >    {      buf.append(i1.toString());    }  | i1=< DIGIT >    {      buf.append(i1.toString());    }  | i1=< UNDERSCORE >    {      buf.append(i1.toString());    }  | i1=< SLASH >    {      buf.append(i1.toString());    }  | i1=< DOLLAR >    {      buf.append(i1.toString());    }  | i1=< COLON >    {      buf.append(i1.toString());    }  | i1=< SEMICOLON >    {      buf.append(i1.toString());    }  | i1=< LSQUARE >    {      buf.append(i1.toString());    }  | i1=< REGEX_SYMBOL >    {      buf.append(i1.toString());    }  | i1=< REGEX_ALLCHARS >    {      buf.append(i1.toString());    }  | i1=< REGEX_EOL >    {      buf.append(i1.toString());    }  | i1=< LPAREN > { s = null; } (s=regexFname())? i2=< RPAREN >    {      buf.append(i1.toString());      if (s != null) {         buf.append(s);      }      buf.append(i2.toString());    }  )+  {    return buf.toString();  }}String regexHistoryPoint() :{    StringBuilder buf = new StringBuilder();   Token i1 = null, i2 = null;   String s = null;}{  (    i1=< NULL >    {      buf.append(i1.toString());    }  | i1=< INSTANCEOF >    {      buf.append(i1.toString());    }  | i1=< NOTHING >    {      buf.append(i1.toString());    }  | i1=< ALIASES >    {      buf.append(i1.toString());    }  | i1=< TARGET >    {      buf.append(i1.toString());    }  | i1=< NEVER >    {      buf.append(i1.toString());    }  | i1=< TRIGGERS >    {      buf.append(i1.toString());    }  | i1=< LETTER >    {      buf.append(i1.toString());    }  | i1=< LETTER_TYPE >    {      buf.append(i1.toString());    }  | i1=< L >    {      buf.append(i1.toString());    }  | i1=< V >    {      buf.append(i1.toString());    }  | i1=< DIGIT >    {      buf.append(i1.toString());    }  | i1=< UNDERSCORE >    {      buf.append(i1.toString());    }  | i1=< SLASH >    {      buf.append(i1.toString());    }  | i1=< DOLLAR >    {      buf.append(i1.toString());    }  | i1=< DOT >    {      buf.append(i1.toString());    }  | i1=< COLON >    {      buf.append(i1.toString());    }  | i1=< LSQUARE >    {      buf.append(i1.toString());    }  | i1=< RSQUARE >    {      buf.append(i1.toString());    }  | i1=< REGEX_SYMBOL >    {      buf.append(i1.toString());    }  | i1=< REGEX_ALLCHARS >    {      buf.append(i1.toString());    }  | i1=< REGEX_EOL >    {      buf.append(i1.toString());    }  | i1=< LPAREN > s=regexHistoryPoint() i2=< RPAREN >    {      buf.append(i1.toString());      buf.append(s);      buf.append(i2.toString());    }  )+  {    return buf.toString();  }}